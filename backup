`timescale 1ns / 1ps
module top(
    output reg[7:0] my_data,
    output reg my_ready,
    output reg my_overflow,
    input ps2_clk,
    input ps2_data
);

/* parameter */
parameter [31:0] clock_period = 10;

/* ps2_keyboard interface signals */
reg clk,clrn;

wire kbd_clk, kbd_data;
reg nextdata_n;

/* verilator lint_off UNUSEDSIGNAL */
wire [7:0] data;
/* verilator lint_on UNUSEDSIGNAL */

/* verilator lint_off UNUSEDSIGNAL */
wire ready, overflow;
/* verilator lint_on UNUSEDSIGNAL */

/* @hgh:test: replace kbd_model with actual kbd*/
ps2_keyboard_model model(
    .ps2_clk(kbd_clk),
    .ps2_data(kbd_data)
);

// assign kbd_clk = ps2_clk;
// assign kbd_data = ps2_data;


ps2_keyboard inst(
    .clk(clk),
    .clrn(clrn),
    .ps2_clk(kbd_clk),
    .ps2_data(kbd_data),
    .data(data),
    .ready(ready),
    .nextdata_n(nextdata_n),
    .overflow(overflow)
);

initial begin /* clock driver */
    clk = 0;
    forever
        #(clock_period/2) clk = ~clk;
end


initial begin
    forever begin
        /*
        需要在键盘控制器ready信号为1的情况下读取键盘数据，确认读取完毕后将nextdata_n置零 一个周期 。 
        */
    clrn = 1'b0;  #20;
    clrn = 1'b1;  #20;
    model.kbd_sendcode(8'h1C); // press 'A'
    
    #20 nextdata_n =1'b0; 
    
    #20 nextdata_n =1'b1;//read data
    model.kbd_sendcode(8'hF0); // break code
    #20 nextdata_n =1'b0; 
    $display("R: %b, O: %b", my_ready,my_overflow);
    // #20 nextdata_n =1'b1; //read data
    // model.kbd_sendcode(8'h1C); // release 'A'
    // #20 nextdata_n =1'b0; 
    
    // #20 nextdata_n =1'b1; //read data
    // model.kbd_sendcode(8'h1B); // press 'S'
    // #20 model.kbd_sendcode(8'h1B); // keep pressing 'S'
    // #20 model.kbd_sendcode(8'h1B); // keep pressing 'S'
    // model.kbd_sendcode(8'hF0); // break code
    // model.kbd_sendcode(8'h1B); // release 'S'
    // #20;
    end
end

// for FPGA show

assign my_data = data;

assign my_ready = ready;
assign my_overflow = overflow;


endmodule
